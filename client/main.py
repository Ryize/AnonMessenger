import asyncio
import json
from dataclasses import dataclass
from datetime import datetime
from typing import Any, Optional

import pywebio.session
import requests
import websockets
from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import run_async, run_js
from websockets.exceptions import InvalidStatusCode

from config import SERVER_URL

DATETIME_TEMPLATE = "%Y-%m-%d %H:%M:%S.%f"


# TODO: 1) –ü—Ä–æ–≤–µ—Å—Ç–∏ –º–∞—Å—à—Ç–∞–±–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞, –ø–æ–∫–∞ —ç—Ç–æ –Ω–µ —Ä–∞–∑—Ä–æ—Å–ª–æ—Å—å –≤ –±–æ–ª—å—à—É—é –ø—Ä–æ–±–ª–µ–º—É (Critical) (‚úÖ);
# TODO: 2) –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç (Bug); (‚úÖ)
# TODO: 3) –û–∫—Ä–∞—Å–∏—Ç—å –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥" –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ü–≤–µ—Ç (Minor) (‚úÖ);
# TODO: 4) –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É "–°–±—Ä–æ—Å", —Ç–æ–ª–∫—É –æ—Ç –Ω–µ—ë –Ω–µ—Ç (Minor) (‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ);
# TODO: 5) –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—É —Å —Ç–∞–π—Ç–ª–æ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ (Will) (‚úÖ).


@dataclass
class Storage:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    code: str  # –ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
    msg_box: Any  # –û–±—ä–µ–∫—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π –æ—Ç pywebio.output
    dialogs: list  # –°–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–º –ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    all_messages: list  # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    recipient: Optional[str] = None  # –ü–æ–ª—É—á–∞—Ç–µ–ª—å (–æ–±—ã—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è)


async def main():
    async def _register() -> None:
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Strotage.code.
        :return: None
        """
        login = await input("–í–≤–µ–¥–∏—Ç–µ login:")
        Storage.code = login
        res = requests.post(SERVER_URL + "/auth/register", data={"login": login})
        Storage.code = res.text
        if res.status_code != 201:
            Storage.msg_box.append(
                put_markdown(f"‚ùå <strong>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {Storage.code}</strong>")
            )
            put_buttons(
                ["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
                onclick=lambda btn: run_js("window.location.reload()"),
            )
        put_scrollable(Storage.msg_box, height=400, keep_bottom=True)
        Storage.msg_box.append(
            put_markdown(
                f"‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞, –Ω–µ –ø–æ—Ç–µ—Ä—è–π—Ç–µ –µ–≥–æ!\n<i>{Storage.code}</i>"
            )
        )

    async def _login() -> None:
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Strotage.code.
        :return: None
        """
        code = await input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:")
        Storage.code = code
        put_scrollable(Storage.msg_box, height=400, keep_bottom=True)

    async def _message_sending_block() -> None:
        """
        –ë–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ—Ç –±–ª–æ–∫ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Storage.recipient.
        :return: None
        """
        while True:
            try:
                recipient = Storage.recipient
                data = await input_group(
                    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    [input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...", name="message")],
                )
                post_data = {
                    "sender": Storage.code,
                    "recipient": recipient,
                    "message": data["message"],
                }
                requests.post(SERVER_URL + "/chat/send_message", data=post_data)
            except AttributeError:
                await asyncio.sleep(0.25)

    async def _select_action(_login, _register, action: str) -> None:
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í —Å–ª—É—á–∞–µ –∏–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤—ã–≤–µ–¥–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        :param _login: function (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        :param _register: function (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
        :param action: str (–≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ)
        :return:
        """
        if action == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
            await _register()

        elif action == "–í–æ–π—Ç–∏":
            await _login()
        else:
            toast("‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
            put_buttons(
                ["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
                onclick=lambda btn: run_js("window.location.reload()"),
            )

    msg_box = output()
    pywebio.session.set_env(title="–ê–Ω–æ–Ω–∏–º–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä Ryize")
    Storage.msg_box = msg_box
    run_js("elem=document.getElementsByTagName(`footer`)[0]; elem.parentNode.removeChild(elem)")
    put_markdown("<center><h2>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä Ryize</h2></center>")
    action = await actions("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", ["–í–æ–π—Ç–∏", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    await _select_action(_login, _register, action)

    run_async(refresh_msg())

    await _message_sending_block()


async def refresh_msg() -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω, –∫–æ–≥–¥–∞ –æ–Ω–æ –ø—Ä–∏—à–ª–æ.
    :return: None
    """
    try:
        await get_list_with_dialogs()
        await display_list_of_dialogs()
        while True:
            if Storage.recipient:
                async with websockets.connect(
                        f"ws://127.0.0.1:5000/chat/accept/{Storage.code}/{Storage.recipient}"
                ) as websocket:
                    await update_message(websocket)
            await asyncio.sleep(0.75)
    except InvalidStatusCode:
        clear()
        put_markdown(f"‚ùå <strong>–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!</strong>")
        put_buttons(
            ["–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"],
            onclick=lambda btn: run_js("window.location.reload()"),
        )


async def update_message(websocket) -> None:
    """
    –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∏–∞–ª–æ–≥–æ–≤, —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–±–æ—Ç–æ–π —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
    :param websocket (–æ–±—ä–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π websockets.connect)
    :return: None
    """

    async def _first_update_message(messages: dict) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.
        :param messages: dict (—Å–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–ª —Å–µ—Ä–≤–µ—Ä)
        :return: None
        """
        dialogs = await get_list_with_dialogs(messages)
        Storage.dialogs = list(set(dialogs))
        recipient = await actions("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥: ", list(set(dialogs)))
        await change_dialog(recipient)
        await display_list_of_dialogs()

    async def _output_new_message(messages: dict) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏—à–µ–¥—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        :param messages: dict (—Å–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π —Å–µ—Ä–≤–µ—Ä–æ–º)
        :return: None
        """
        for message in messages:
            if (
                    not (isinstance(message, dict))
                    or message["recipient"] != Storage.recipient
            ):
                continue
            Storage.all_messages.append(message)
            Storage.msg_box.append(
                put_markdown(f"`{message['sender']}`: {message['message']}")
            )
        Storage.msg_box.append()

    while True:
        messages = await websocket.recv()
        messages = json.loads(messages)
        if messages:
            await _output_new_message(messages)


async def change_dialog(btn: str) -> None:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –∏–∑–º–µ–Ω—è–µ—Ç Storage.recipient.
    :param btn: str (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å –∫–æ—Ç–æ—Ä—ã–º –º—ã —Ç–µ–ø–µ—Ä—å –æ–±—â–∞–µ–º—Å—è)
    :return: None
    """
    if not await check_new_dialog(btn):
        Storage.recipient = btn
        messages_in_dialog = [
            i
            for i in Storage.all_messages
            if i["sender"] == btn or i["recipient"] == btn
        ]
        Storage.msg_box.append(
            put_markdown(
                f'\n\n{"-" * 32}\n\n<strong>–î–∏–∞–ª–æ–≥ —Å <i>{Storage.recipient}</i></strong>\n'
            )
        )
        for message in messages_in_dialog:
            Storage.msg_box.append(
                put_markdown(f"`{message['sender']}`: {message['message']}")
            )
        Storage.msg_box.append()


async def check_new_dialog(message: str) -> bool:
    """
    –°–æ–∑–¥–∞—ë—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ –∫–æ–¥—É).
    :param message: str
    :return: bool
    """

    async def _get_send_data() -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "üëê" –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
        :return: dict (—Å–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø–æ–ª—É—á–∞–µ–º—ã–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
        """
        data = await input_group(
            "–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥", [input("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫...", name="recipient")]
        )
        post_data = {
            "sender": Storage.code,
            "recipient": data["recipient"],
            "message": "üëê",
        }
        return post_data

    async def _check_res(post_data: dict, res) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞, –≤ —Å–ª—É—á–∞–µ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ != 201, –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É.
        :param post_data: dict (—Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
        :param res: (–æ–±—ä–µ–∫—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π requests.post)
        :return: None
        """
        if res.status_code != 201:
            toast(f"‚ùå {res.text}")
        else:
            Storage.dialogs.append(post_data["recipient"])
            Storage.dialogs.append(Storage.dialogs.pop(-1))
            await change_dialog(post_data["recipient"])

    if message != "–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥":
        return False
    with use_scope("buttons_under_chat"):
        clear()
        post_data = await _get_send_data()
        res = requests.post(SERVER_URL + "/chat/send_message", data=post_data)
        await _check_res(post_data, res)
    with use_scope("buttons_under_chat"):
        await display_list_of_dialogs()


async def display_list_of_dialogs() -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ.
    :return: None
    """
    with use_scope("buttons_under_chat"):
        put_buttons(
            [dict(label="–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥", value="–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥", color="success")],
            onclick=check_new_dialog,
        )
        put_buttons(Storage.dialogs, onclick=change_dialog)


async def get_list_with_dialogs(messages: Optional[dict] = None) -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param messages: list (—Å–ø–∏—Å–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ [0] - sender, [1] - recipient)
    :return:
    """
    dialogs = []
    all_messages = []
    messages = messages or json.loads(
        requests.post(f'{SERVER_URL}/chat/get_all_messages', data={'code': Storage.code}).text)
    for i in [messages["sender"], messages["recipient"]]:
        for user in i:
            dialogs.append(
                user["sender"]
                if user["recipient"] == messages["login"]
                else user["recipient"]
            )
            all_messages.append(user)
    all_messages.sort(
        key=lambda i: datetime.strptime(i["created_at"], DATETIME_TEMPLATE)
    )
    Storage.dialogs = list(set(dialogs))
    Storage.all_messages = all_messages
    return dialogs


if __name__ == "__main__":
    start_server(main, debug=True, port=8080, remote_access=True)
