import json
from dataclasses import dataclass
from datetime import datetime
from typing import Any

import requests
import websockets
from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import run_async, run_js
from websockets.exceptions import InvalidStatusCode

from config import SERVER_URL

DATETIME_TEMPLATE = '%Y-%m-%d %H:%M:%S.%f'


@dataclass
class Storage:
    code: str
    msg_box: Any
    dialogs: list
    recipient: str
    all_messages: list


async def main():
    global msg_box, code
    msg_box = output()
    action = await actions("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", ["–í–æ–π—Ç–∏", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    if action == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        login = await input('–í–≤–µ–¥–∏—Ç–µ login:')
        put_markdown("–ê–Ω–æ–Ω–∏–º–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä Ryize")

        res = requests.post(SERVER_URL + '/auth/register', data={'login': login})
        code = res.text
        if res.status_code != 201:
            msg_box.append(put_markdown(f'‚ùå <strong>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {code}</strong>'))
            put_buttons(["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"], onclick=lambda btn: run_js('window.location.reload()'))
        put_scrollable(msg_box, height=400, keep_bottom=True)
        msg_box.append(put_markdown(f'‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞, –Ω–µ –ø–æ—Ç–µ—Ä—è–π—Ç–µ –µ–≥–æ!\n<i>{code}</i>'))

    elif action == "–í–æ–π—Ç–∏":
        code = await input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:')
        put_markdown("–ê–Ω–æ–Ω–∏–º–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä Ryize")
        put_scrollable(msg_box, height=400, keep_bottom=True)
    else:
        toast('‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!')
        put_buttons(["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"], onclick=lambda btn: run_js('window.location.reload()'))

    run_async(refresh_msg(code))

    while True:
        data = await input_group('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', [input('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...', name='message')])
        post_data = {
            'sender': code,
            'recipient': recipient,
            'message': data['message'],
        }
        requests.post(SERVER_URL + '/chat/send_message', data=post_data)


async def refresh_msg(code: str):
    global all_messages, recipient
    all_messages = []

    try:
        async with websockets.connect(f'ws://127.0.0.1:5000/chat/accept/{code}') as websocket:
            await update_message(websocket)
    except InvalidStatusCode:
        clear()
        put_markdown(f'‚ùå <strong>–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!</strong>')
        put_buttons(["–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"], onclick=lambda btn: run_js('window.location.reload()'))


async def update_message(websocket):
    first_iter = True
    while True:
        messages = await websocket.recv()
        messages = json.loads(messages)
        if first_iter:
            dialogs = await get_list_with_dialogs(messages)
            recipient = await actions("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥: ", list(set(dialogs)))
            await change_dialog(recipient)
            with use_scope('buttons_under_chat'):
                list_unique_dialogs = list(set(dialogs))
                list_unique_dialogs.append('–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥')
                put_buttons(list_unique_dialogs, onclick=change_dialog)
            first_iter = False
        if messages:
            for message in messages:
                if not (isinstance(message, dict)) or message['recipient'] != recipient:
                    continue
                all_messages.append(message)
                msg_box.append(put_markdown(f"`{message['sender']}`: {message['message']}"))
            msg_box.append()


async def change_dialog(btn: str):
    global recipient
    if not await check_new_dialog(btn):
        recipient = btn
        messages_in_dialog = [i for i in all_messages if i['sender'] == btn or i['recipient'] == btn]
        msg_box.append(put_markdown(f'\n\n{"-" * 32}\n\n<strong>–î–∏–∞–ª–æ–≥ —Å <i>{recipient}</i></strong>\n'))
        for message in messages_in_dialog:
            msg_box.append(put_markdown(f"`{message['sender']}`: {message['message']}"))
        msg_box.append()


async def check_new_dialog(message: str) -> bool:
    if message != '–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥':
        return False
    with use_scope('buttons_under_chat'):
        clear()
        data = await input_group('–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥', [input('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫...', name='recipient')])
        post_data = {
            'sender': code,
            'recipient': data['recipient'],
            'message': 'üëê',
        }
        res = requests.post(SERVER_URL + '/chat/send_message', data=post_data)
        if res.status_code != 201:
            toast(f'‚ùå {res.text}')
        with use_scope('buttons_under_chat'):
            list_unique_dialogs = list(set(await get_list_with_dialogs()))
            list_unique_dialogs.append('–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥')
            put_buttons(list_unique_dialogs, onclick=change_dialog)



async def get_list_with_dialogs(messages: dict):
    global all_messages
    dialogs = []
    all_messages = []
    for i in [messages['sender'], messages['recipient']]:
        for user in i:
            dialogs.append(user['sender'] if user['recipient'] == messages['login'] else user['recipient'])
            all_messages.append(user)
    all_messages.sort(key=lambda i: datetime.strptime(i['created_at'], DATETIME_TEMPLATE))
    return dialogs


if __name__ == "__main__":
    start_server(main, debug=True, port=8080, cdn=False)
